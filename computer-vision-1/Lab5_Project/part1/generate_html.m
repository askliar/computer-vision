function [html] = generate_html(data, mAP, mAP_data, vocab_count, pos_count, neg_count, vocab_size,...
                                sift_features, colorspace, kernel_type,...
                                best_params, step_size, block_size)
    final_img_str = '';
    file_names_size = size(data{1}, 1);
    for j=1:file_names_size
        single_img_str = '';
        for i = 1:size(data, 1)
            img_name = data{i}(j);
            single_img_str = strcat(single_img_str, sprintf('<td><img src=\"%s\"/></td>', img_name));
        end
        single_row_str = sprintf('<tr>%s</tr>', single_img_str);
        final_img_str = strcat(final_img_str, single_row_str);
    end
    
    if best_params ~= 'None'
        best_c = '';
        best_gamma = '';
        best_degree = '';
        for i = 1:size(best_params, 1)
            params = best_params{i};
            if strcmp(kernel_type, 'linear')
                best_c = strcat(best_c, sprintf('<th>Best C:%f</th>', params));
            elseif strcmp(kernel_type, 'rbf')
                best_c = strcat(best_c, sprintf('<th>Best C: %f</th>', params(1)));
                best_gamma = strcat(best_gamma, sprintf('<th>Best Gamma:%f</th>', params(2)));
            elseif strcmp(kernel_type, 'polynomial')
                best_c = strcat(best_c, sprintf('<th>Best C: %f</th>', params(1)));
                best_gamma = strcat(best_gamma, sprintf('<th>Best Gamma: %f</th>', params(2)));
                best_degree = strcat(best_degree, sprintf('<th>Best Degree: %f</th>', params(3)));
            end
        end
        params_row = sprintf('<tr>%s</tr><tr>%s</tr><tr>%s</tr>', best_c, best_gamma, best_degree);
    end
    
    fraction = vocab_count/pos_count;
    
    if strcmp(sift_features, 'dense')
        sift_str = strcat(sprintf('<tr><th>SIFT step size</th><td>%d px</td></tr>', step_size),...
            sprintf('<tr><th>SIFT block sizes</th><td>%d pixels</td></tr>', block_size));
    else
        sift_str = '';
    end
    

    final_html = ['<!DOCTYPE html>'...
        '<html lang="en">'...
        '<head>'...
        '<meta charset="utf-8">'...
        '<title>Image list prediction</title>'...
        '<style type="text/css">'...
        'img {'...
        'width:200px;'...
        '}'...
        '</style>'...
        '</head>'...
        '<body>'...
        '<h2>Andrii Skliar, Gabriele Bani</h2>'...
        '<h1>Settings</h1>'...
        '<table>'...
        sprintf('<tr><th>SIFT features</th><td>%s</td></tr>%s', sift_features, sift_str)...
        sprintf('<tr><th>SIFT method</th><td>%s-SIFT</td></tr>', colorspace)...
        sprintf('<tr><th>Vocabulary size</th><td>%d words</td></tr>', vocab_size)...
        sprintf('<tr><th>Vocabulary fraction</th><td>%f</td></tr>', fraction)...
        sprintf('<tr><th>SVM training data</th><td>%d positive, %d negative per class</td></tr>', pos_count, neg_count)...
        sprintf('<tr><th>SVM kernel type</th><td>%s</td></tr>', kernel_type)...
        '</table>'...
        sprintf('<h1>Prediction lists (MAP: %f)</h1>', mAP)...
        '<table>'...
        '<thead>'...
        '<tr>'...
        sprintf('<th>Airplanes (AP: %f)</th>', mAP_data(1))...
        sprintf('<th>Cars (AP: %f)</th>', mAP_data(2))...
        sprintf('<th>Faces (AP: %f)</th>', mAP_data(3))...
        sprintf('<th>Motorbikes (AP: %f)</th>', mAP_data(4))...
        '</tr>'...
        sprintf('%s', params_row)...
        '</thead>'...
        sprintf('<tbody>%s', final_img_str)...
        '</tbody>'...
        '</table>'...
        '</body>'...
        '</html>'
    ];
    html = string(final_html);
end
